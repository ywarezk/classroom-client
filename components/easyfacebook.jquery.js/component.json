{
  "name": "easyfacebook.jquery.js",
  "version": "0.0.13",
  "main": [
    "easyfacebook.jquery.css",
    "easyfacebook.jquery.js"
  ],
  "dependencies": {
    "jquery": ">=1.5"
  },
  "ignore": [
    "examples/",
    "_notes/",
    ".git/",
    ".idea/",
    "*.zip",
    "css/",
    "js/",
    "images/",
    "old/",
    "src/",
    "tests/",
    "components/",
    "*.php",
    "*.html",
    "*.txt",
    "**.php",
    "**.html",
    "**.txt",
    "*.gitignore",
    "*.gitattributes",
    ".gitignore",
    ".gitattributes",
    "action.php",
    "base.php",
    "channel.html",
    "configs.php",
    "exemples.php",
    "index.php",
    "LICENSE-MIT.txt",
    "php.php"
  ],
  "gitHead": "b31a5011dc582809c9f853a92a48dff249bfb317",
  "readme": "# Easy Facebook Javascript Starter kit\n\n  \n\n    * Présentation et pré-requis\n    * Utilisation\n    * Fonctions disponibles\n  \n  \n\n  \n\n## Présentation et pré-requis\n\n\n\nLa création de fan page custom et de site web intéragissant avec la plateforme\nfacebook s'avère souvent beaucoup plus complexe qu'initialement prévu. La\nméconnaissance des concepts de base du développement de projet Facebook est à\nl'origine de la plupart des problèmes en cours de production. Cette librairie\npeut être utilisé dans une fan page Facebook ou dans un site web normal. Ce\nprojet a été testé pour être compatible avec un DOCTYPE XHTML ou HTML5.\n\n### Pré-requis pour l'utilisation du Facebook Starter kit\n\n  * Connaissance minimal en intégration ou en développement de site web\n  * Un service d'hébergement de site web\n  * Une app dans [facebook développers](http://www.facebook.com/developpers)\n  * [Jquery](http://jquery.com/)\n\nVoici un outil créé pour les développeurs de site web afin de simplifier les\nintérections avec l'Api Facebook. Cette outil centralise toutes les actions\nnécessaire à la connection, gestion de permission, action sur la plateforme\nFacebook, tracking Google analytique et débuggage.\n\nL'outils simplifie les configurations et script nécessaire au démarrage d'un\nprojet facebook tout en n'étant pas limitatif sur les développements plus\ncomplexe.\n\n### Ce projet inclu :\n\n  * Une structure de fichiers\n  * Une librairie de fonctions javascript\n  * Des exemples d'utilisation\n  * Outil de Tracking Google Analytics\n  * Outil de connection Facebook Connect\n  * Outil de débugging\n  \n  \n  \n\n## Utilisation\n\n\nL'utilisation de cette librairie se veut simplifié et flexible. Les options\nsont totalement paramètrable et des propriétées génériques sont utilisées pour\nlimiter les erreurs de script.\n\n### Ajout css et javascript dans le head\n\n#### Modification du tag HTML :\n\n`‹html xmlns:fb=\"http://ogp.me/ns/fb#\"›`\n\n#### Base Easy Facebook :\n\n`‹script type=\"text/javascript\"\nsrc=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.js\"›‹/script›\n\n‹link href=\"css/easyfacebook.css\" rel=\"stylesheet\" type=\"text/css\"/›\n\n‹script src=\"js/easyfacebook.js\" type=\"text/javascript\"›‹/script› `\n\n#### À ajouter pour champ Auto-complete :\n\n`‹script type=\"text/javascript\"\nsrc=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.js\"›‹/script›\n\n‹link href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base\n/jquery-ui.css\" rel=\"stylesheet\" type=\"text/css\"/› `\n\n#### À ajouter pour champ Carrousel Photo :\n\n`‹script\nsrc=\"http://sorgalla.com/projects/jcarousel/lib/jquery.jcarousel.min.js\"\ntype=\"text/javascript\"›‹/script›\n\n‹link href=\"css/jcarrousel.skin.css\" rel=\"stylesheet\" type=\"text/css\"/› `\n\n### Ajout de méta tag pour le sharing\n\n`‹meta property=\"og:title\" content=\"Easy Facebook Javascript Tools \" /›\n\n‹meta property=\"og:type\" content=\"article\" /›\n\n‹meta property=\"og:url\" content=\"http://www.example.ca/\" /›\n\n‹meta property=\"og:image\" content=\"http://www.example.ca/image.jpg\" /›\n\n‹meta property=\"og:site_name\" content=\"Easy Facebook Javascript Tools\" /›\n\n‹meta property=\"fb:admins\" content=\"xxxxxxxxxxx\" /› `\n\n### Ajout du fb-root tag de facebook dans le body\n\n`‹div id=\"fb-root\"›‹/div›`\n\n### Initialisation\n\nLors de l'initialisation plusieurs options sont nécessaire. Les options\nobligatoire sont :\n\n  * `api_key` ( Facebook App Api Key ),\n  * `FB_lang` ( Langue pour les éléments Facebook //en_CA = invalid //en_US = valid ),\n  * `base_url` ( Root url de votre code source ).\n    \n    ‹script type=\"text/javascript\"›\n    \n                    $(document).ready(function(){\n                    $('#fb-root').easyfb().fbinit({\n                    api_key: 'XXXXXXXXXXX', // obligatoire\n                    FB_lang: 'fr_CA', // obligatoire //en_CA est invalide //en_US est valide\n                    base_url: 'XXXXXXXXXXX' //  obligatoire, utilisé pour le sharing et les friends requests\n                    });\n                    })(jQuery)\n    \n                    ‹/script›\n                \n\nAutres Options d'initiatilisation de la libarie:\n\n  * `perms` : '', // Si des permission sont nécessaire au chargement de la page\n  * `get_access_token` : '1', // obligatoire pour le chargement du wall of post et pour faire des 'actions' facebook\n  * `set_access_token` : 'XYZ123', // optionel pour le chargement du wall of post avec un token fourni par le backend.\n  * `get_user` : '1', // obligatoire pour créer un évenement et pour accéder aux données de l'utilisateur\n  * `get_friends` : '1', // obligatoire pour utiliser la fonction autocomplete et pour obtenir la liste des amis =&gt; var friends = friends; liste des amis dans la variable \n\nfriends\n  * `GA_Account` : 'UA-9999999-9', // Google analitics sera activé si différent de UA-9999999-9 ou 0\n  * `tracking_prefix` : 'demo', // prefix pour Google analitics\n  * `auto_resize_tab` : '1' // utilisé pour redimentionner le iframe dans une fanpage // pour éviter la scroll bar\n\nLes fonctions disponible dans la librairie sans avoir besoin d'un login\npréalable ou d'acceptation de permission facebook sont:\n\n  * Bouton J'aime : **$(\".like\").easyfb().like({ ... });**\n  * Bouton Envoyer : **$(\".send\").easyfb().send({ ... });**\n  * Inviter un ami : **$(\"#invite_friends\").easyfb().inviteFriends({ ... });**\n  * Partager : **$(\"#share\").easyfb().share({ ... });**\n  * Demande de login : **$('#login_request').easyfb().login({ ... }); **\n  * Is Fan of the page : **$(this).easyfb().isFan({ ... });**\n\nVoici un [example](base.php) de ces fonctions.\n\nPour avoir accès automatiquement aux données utilisateur il faut ajouter\n**get_user:'1'** lors de l'initialisation, la variable populé sera 'user'.\nPour avoir accès à la liste d'amis il faut ajouter **get_friends:'1'**, la\nvariable populé sera 'friends'.\n\n    \n    $('#fb-root').easyfb().fbinit({\n                    ...\n                    get_user:'1',\n                    get_friends:'1'\n                    ...\n                    });\n\nPour pouvoir utiliser les valeurs populés dans ces variables il faut attendre\nque la librairie se connecte à facebook et qu'elle valide les permissions. Des\nappels sont lancé lors de l'initialisation de easy facebook pour annoncer les\nevenements. Les évènements 'user' et 'friends' annoncent l'initialiation de\nces variables.\n\nElles sont ensuite utilisable comme ceci:\n\n    \n    $('body').bind('user', function(){ console.log(  value.name +','+ user.id  ); });  \n    \n                ou   \n      \n    $('body').bind('friends', function(){\n                          \n      $.each(friends, function(key, value) {\n                          \n        console.log( value.name +','+ value.uid );\n                          \n      });\n                          \n    });\n                    \n\n[Références sur les propriétés disponible pour un user et les permissions\ncorrespondantes](https://developers.facebook.com/docs/reference/api/user/)\n\n[Références sur les propriétés disponible pour un\nami](https://developers.facebook.com/docs/reference/api/user/)\n\nPour populer un wall de post ou une liste de commentaire il faut attendre que\nle init facebook soit complêté. Il faut aussi ajouter dans l'initialisation\n**get_access_token:'1'** et attendre l'évènement **access_token**.\n\n    \n    $('#fb-root').easyfb().fbinit({\n                    ...\n                    get_access_token:'1'\n                    ...\n                    });\n\nVoici un example:\n\n    \n    $('body').bind('access_token', function(){\n    \n                    $(\"#wall\").easyfb().showWall({\n                    nb: 25,\n                    feed: 'https://graph.facebook.com/106393796069284/feed',\n                    loading_message: \"Chargement du mur ...\",\n                    timeout:'25000'\n                    });\n    \n                    $(\"#comment_box\").easyfb().commentsBox({\n                    nb: 25,\n                    feed: 'https://graph.facebook.com/comments/?ids=http://www.example.com',\n                    loading_message: \"Chargement du mur ...\",\n                    timeout:'25000'\n                    });\n    \n                    });\n\n  \n\nToutes les fonctions de la librairie sont accessibles au chargement de la page\nou sur un évènement (ex: onClick ).\n\nUne fonction ayant le parammetre **'on: \"click\"'** sera exécuté seulement lors\nd'un click sur l'élément déclaré. Par défault la fonction sera exécuté au\nchargement de la page. Il faut donc s'assurer d'avoir en main les variables /\npermissions nécessaires avant d'exécuter la fonction. Example: si dans une\nfonction on compte utiliser une information utilisateur provenant de la\nvariable user. Il faut s'assurer d'avoir attendu que la permission soit\ndisponible avant de d'exécuter la fonction.\n\n  \nAinsi ceci:\n\n    \n    $('.login_request').easyfb().login({\n                    on: 'click',\n                    get_access_token: '0',\n                    get_user: '1',\n                    get_friends: '1',\n                    perms: 'publish_stream,publish_actions',\n                    success: function(){\n    \n    \n                    $('.login_request').hide();\n    \n    \n    \n                    }\n    \n                    });\n                \n\nDéclanchera une demande de permission sur le click de les éléments\n\".login_request\".\n\nLes fonctions utilisées au chargement de la page doivent préférablement être\nutilisées après l'événement 'fbinit' donc à l'intérieur de l'écouteur\nd'évenement: `$('body').bind('fbinit', function(){ ... });`\n\n  \n  \n  \n\n## Liste des fonctions disponibles\n\n\n\n### Initialisation\n\n  * Init : **$('#fb-root').easyfb().fbinit({ ... });**\n\n### Login / Permissions\n\n  * Demande de login / Permissions : **$('#login_request').easyfb().login({ ... });**\n\n### Fonctions de base\n\n  * Bouton J'aime : **$(\".like\").easyfb().like({ ... });**\n  * Bouton Envoyer : **$(\".send\").easyfb().send({ ... });**\n  * Inviter un ami : **$(\"#invite_friends\").easyfb().inviteFriends({ ... });**\n  * Partager : **$(\"#share\").easyfb().share({ ... });**\n  * Ajouter à sa liste d'ami : **$(\"#add_friend\").easyfb().addFriend({ ... });**\n  * Is Fan of the page : **$(this).easyfb().isFan({ ... });**\n\n### Fonctions avancées\n\nFonctions nécessitant l'ajout de **get_access_token:'1'** lors de\nl'initialisation\n\n  * Mur de post venant d'une fanpage : **$(\"#wall\").easyfb().showWall({ ... });**\n  * Mur de commentaire à partir d'une url : **$(\"#comment_box\").easyfb().commentsBox({ ... });**\n\nÉvènement - Fonctions nécessitant la permission **'create_event'**.\n\n  * Créer un évènement : **$(\"#create_event\").easyfb().createEvent({ ... });**\n  * Participer à un évènement : **$(\".attend_event\").each(function (){ ... });**\n\nFonctions nécessitant la permission **'publish_actions'**.\n\n  * Action Facebook : **$(\"#action\").easyfb().action({ ... });**\n\nFonctions nécessitant l'ajout de **jquery-ui** dans le head de la page et\n**get_friends:'1'** lors de l'initialisation.\n\n  * Champs autocomplété choix d'ami : **$(\"#friend_autocomplete\").easyfb().friendAutoComplete({ ... });**\n  \n  \n  \n\nGreen attributes are native from facebook,\n\nRed attributes are specific to this library.\n\n  \n\n## Initialisation et Login / Permissions\n\n### Initialisation de la librairie : _$(\"#fb-root\").easyfb().fbinit({ ... });_\n\nInitialisation de la librairie et de l'application facebook\n\n#### Attributs:\n\n  * `api_key` Obligatoire - ( Facebook App Api Key ),\n  * `FB_lang` Obligatoire - ( Langue pour les éléments Facebook //en_CA = invalid //en_US = valid ),\n  * `base_url` Obligatoire - ( Root url de votre code source ).\n  * `perms` : '', // Si des permission sont nécessaire au chargement de la page\n  * `get_access_token` : '1', // obligatoire pour le chargement du wall of post et pour faire des 'actions' facebook\n  * `set_access_token` : '...', // will set the access token from backend, utilisé pour le chargement du wall of post\n  * `get_user` : '1', // obligatoire pour créer un évenement et pour accéder aux données de l'utilisateur\n  * `get_friends` : '1', // obligatoire pour utiliser la fonction autocomplete et pour obtenir la liste des amis =&gt; var friends = friends; liste des amis dans la variable \n\nfriends\n  * `GA_Account` : 'UA-9999999-9', // Google analitics sera activé si différent de UA-9999999-9 ou 0\n  * `tracking_prefix` : 'demo', // prefix pour Google analitics\n  * `auto_resize_tab` : '1' // utilisé pour redimentionner le iframe dans une fanpage // pour éviter la scroll bar\n  \nRéférences\n\n### Demande de login : _$('#login_request').easyfb().login({ ... });_\n\nDialogues combinant [FB.getLoginStatus](https://developers.facebook.com/docs/r\neference/javascript/FB.getLoginStatus/) et [FB.login](https://developers.faceb\nook.com/docs/reference/javascript/FB.login/) pour une demande de login et de\npermissions\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `get_access_token` - will get the access token if this is equal to true, utilisé pour le chargement du wall of post et pour faire des 'actions' facebook\n  * `set_access_token` - will set the access token from backend, utilisé pour le chargement du wall of post et pour faire des 'actions' facebook\n  * `get_user` - obligatoire pour créer un évenement et pour accéder aux données de l'utilisateur =&gt; crée une variable user qui contiens les données de l'utilisateur\n  * `get_friends` - obligatoire pour utiliser la fonction autocomplete et pour obtenir la liste des amis =&gt; crée une variable user qui contiens les données de l'utilisateur\n  * `perms` - liste des permissions (scope) demandé par l'apps\n  * `success` - fonction à exécuter lorsque le login est un succès =&gt; function(){ ... }\n\n## Fonctions de base\n\n### Bouton J'aime _$(\".like\").easyfb().like({ ... });_\n\nGénère un tag ‹fb:like›‹/fb:like›\n\n#### Attributs:\n\n  * `on` - event on which the button is generated base on the element in selector(ex: 'click'), if params is not present the button will be generated on loading\n  * `url` - the URL to like. \n  * `send` - specifies whether to include a [Send button](http://developers.facebook.com/docs/reference/plugins/send/) with the Like button. This only works with the XFBML \n\nversion. \n  * `layout` - there are three options. \n    * `standard` - displays social text to the right of the button and friends' profile photos below. Minimum width: 225 pixels. Default width: 450 pixels. Height: 35 pixels \n\n(without photos) or 80 pixels (with photos). \n    * `button_count` - displays the total number of likes to the right of the button. Minimum width: 90 pixels. Default width: 90 pixels. Height: 20 pixels. \n    * `box_count` - displays the total number of likes above the button. Minimum width: 55 pixels. Default width: 55 pixels. Height: 65 pixels.\n  * `show_faces` - specifies whether to display profile photos below the button (standard layout only) \n  * `width` - the width of the Like button. \n  * `action` - the verb to display on the button. Options: 'like', 'recommend' \n  * `font` - the font to display in the button. Options: 'arial', 'lucida grande', 'segoe ui', 'tahoma', 'trebuchet ms', 'verdana' \n  * `colorscheme` - the color scheme for the like button. Options: 'light', 'dark' \n  * `ref` - a label for tracking referrals; must be less than 50 characters and can contain alphanumeric characters and some punctuation (currently +/=-.:_). The ref attribute \n\ncauses two parameters to be added to the referrer URL when a user clicks a link from a stream story about a Like action: \n    * `fb_ref` - the ref parameter \n    * `fb_source` - the stream type ('home', 'profile', 'search', 'other') in which the click occurred and the story type ('oneline' or 'multiline'), concatenated with an \n\nunderscore.\n  \n[Références](https://developers.facebook.com/docs/reference/plugins/like/)\n\n### Bouton Envoyer : _$(\".send\").easyfb().send({ ... });_\n\nGénère un tag ‹fb:send›‹/fb:send›\n\n#### Attributs:\n\n  * `on` - event on which the button is generated base on the element in selector(ex: 'click'), if params is not present the button will be generated on loading\n  * `url` - the URL to send. \n  * `font` - the font to display in the button. Options: 'arial', 'lucida grande', 'segoe ui', 'tahoma', 'trebuchet ms', 'verdana' \n  * `colorscheme` - the color scheme for the button. Options: 'light', 'dark' \n  * `ref` - a label for tracking referrals; must be less than 50 characters and can contain alphanumeric characters and some punctuation (currently +/=-.:_). The ref attribute \n\ncauses two parameters to be added to the referrer URL when a user clicks a link from a stream story about a Send action: \n    * `fb_ref` - the ref parameter \n    * `fb_source` - the story type ('message', 'group', 'email') in which the click occurred.\n  \n[Références](http://developers.facebook.com/docs/reference/plugins/send/)\n\n### Inviter un ami : _$(\"#invite_friends\").easyfb().inviteFriends({ ... });_\n\nDialogues d'invitation de plusieurs amis utilisant\n[FB.ui](https://developers.facebook.com/docs/reference/javascript/FB.ui/)\n(envoi une notification avec un liens vers votre canevas url)\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `message` - The request the receiving user will see. It appears as a question posed by the sending user. The maximum length is 255 characters.\n  * `data` - Optional, additional data you may pass for tracking. This will be stored as part of the request objects created. The maximum length is 255 characters.\n  * `title` - Optional, the title for the friend selector dialog. Maximum length is 50 characters. \n  * `to` - Optional, A user ID or username. This may or may not be a friend of the user. If this is specified, the user will not have a choice of recipients. If this is \n\nomitted, the user will see a friend selector and will be able to select a maximum of 50 recipients. (Due to URL length restrictions, the maximum number of recipients is 25 in \n\nIE7 and also in IE8+ when using a non-iframe dialog.) \n  * `filters` - Optional, default is '', which shows a selector that includes the ability for a user to browse all friends, but also filter to friends using the application and \n\nfriends not using the application. Can also be all, app_users and app_non_users. This controls what set of friends the user sees if a friend selector is shown. If all, \n\napp_users ,or app_non_users is specified, the user will only be able to see users in that list and will not be able to filter to another list. Additionally, an application can \n\nsuggest custom filters as dictionaries with a name key and a user_ids key, which respectively have values that are a string and a list of user ids. name is the name of the \n\ncustom filter that will show in the selector. user_ids is the list of friends to include, in the order they are to appear. \n  * `exclude_ids` - Optional, A array of user IDs that will be excluded from the dialog, for example: exclude_ids: [1, 2, 3]   \nIf a user is excluded from the dialog, the user will not show in the friend\nselector.\n\n  * `max_recipients` - Optional, An integer that specifies the maximum number of friends that can be chosen by the user in the friend selector. \n  \n[Références](https://developers.facebook.com/docs/reference/dialogs/requests/)\n\n### Partager : _$(\"#share\").easyfb().share({ ... });_\n\nDialogues d'invitation de plusieurs amis utilisant\n[FB.ui](https://developers.facebook.com/docs/reference/javascript/FB.ui/)\n(envoi une notification avec un liens vers votre canevas url)\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `from` - The ID or username of the user posting the message. If this is unspecified, it defaults to the current user. If specified, it must be the ID of the user or of a \n\npage that the user administers.\n  * `to` - The ID or username of the profile that this story will be published to. If this is unspecified, it defaults to the the value of from.\n  * `message` - This field will be ignored on July 12, 2011 The message to prefill the text field that the user will type in. To be compliant with Facebook Platform Policies, \n\nyour application may only set this field if the user manually generated the content earlier in the workflow. Most applications should not set this.\n  * `link` - The link attached to this post\n  * `picture` - The URL of a picture attached to this post. The picture must be at least 50px by 50px and have a maximum aspect ratio of 3:1\n  * `source` - The URL of a media file (e.g., a SWF or video file) attached to this post. If both source and picture are specified, only source is used.\n  * `name` - The name of the link attachment.\n  * `caption` - The caption of the link (appears beneath the link name).\n  * `description` - The description of the link (appears beneath the link caption).\n  * `properties` - A JSON object of key/value pairs which will appear in the stream attachment beneath the description, with each property on its own line. Keys must be \n\nstrings, and values can be either strings or JSON objects with the keys text and href.\n  * `actions` - A JSON array of action links which will appear next to the \"Comment\" and \"Like\" link under posts. Each action link should be represented as a JSON object with \n\nkeys name and link.\n  * `ref` - A text reference for the category of feed post. This category is used in Facebook Insights to help you measure the performance of different types of post\n  \n[Références](https://developers.facebook.com/docs/reference/dialogs/feed/)\n\n### Ajouter à sa liste d'ami : _$(\"#add_friend\").easyfb().addFriend({ ... });_\n\nDialogues d'ajout à sa liste d'amis utilisant\n[FB.ui](https://developers.facebook.com/docs/reference/javascript/FB.ui/)\n(envoi une demande d'amitié)\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `redirect_uri` - The URL to redirect to after the user clicks a button on the dialog. Required, but automatically specified by most SDKs.\n  \n[Références](https://developers.facebook.com/docs/reference/dialogs/friends/)\n\n### Is Fan of the page : _$(this).easyfb().isFan({ ... });_\n\nRequête utilisant\n[FB.api](https://developers.facebook.com/docs/reference/javascript/FB.api/)\npour vérifier si l'utilisateur like une page facebook.\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `page_id` Obligatoire - id de la page à tester\n  * `success` - Optionel - fonction exécuté si la personne est fan. Ex: function(){ ... })\n  * `fail` - Optionel - fonction exécuté si la personne n'est pas fan. Ex: function(){ ... })\n\n## Fonctions avancées\n\n  \n\n### Fonctions nécessitant l'ajout de _get_access_token:'1'_ lors de\nl'initialisation\n\n### Mur de post venant d'une fanpage : _$(\"#wall\").easyfb().showWall({ ...\n});_\n\nRequête utilisant\n[FB.api](https://developers.facebook.com/docs/reference/javascript/FB.api/)\npour populer un wall de post d'une page facebook. 'get_access_token' dans la\nfonction init est requis pour utiliser cette fonction, optionellement\n'set_access_token' peut fournir un token à partir du backend. Cette fonction\npermet de pouvoir skinner totalement le wall par css.\n\n#### Attributs:\n\n  * `nb` Obligatoire - nombre de post à afficher\n  * `feed` Obligatoire - url d'un feed sur https://graph.facebook.com/... id de la page .../feed \n  * `loading_message` Message pendant le chargement \n  * `timeout` Timeout en tick - par défault : 25000 \n  \n[Graph Explorer](https://developers.facebook.com/tools/explorer/?method=GET&amp;pa\nth=706847059)\n\n[Api graph Page Feed\nReferences](https://developers.facebook.com/docs/reference/api/page/)\n\n### Mur de commentaire : _$(\"#wall\").easyfb().commentsBox({ ... });_\n\nRequête utilisant\n[FB.api](https://developers.facebook.com/docs/reference/javascript/FB.api/)\npour populer un wall de post d'une page facebook. 'get_access_token' dans la\nfonction init est requis pour utiliser cette fonction. Cette fonction permet\nde pouvoir skinner totalement le wall par css.\n\n#### Attributs:\n\n  * `nb` Obligatoire - nombre de post à afficher\n  * `feed` Obligatoire - url d'un feed de commentaire sur https://graph.facebook.com/comments/?ids=**http://www.example.comℴ_by=created_time&amp;since;=2011-07-22&amp; **\n  * `loading_message` Message pendant le chargement \n  * `timeout` Timeout en tick - par défault : 25000 \n  \n[Graph Explorer](https://developers.facebook.com/tools/explorer/?method=GET&amp;pa\nth=706847059)\n\n[Api graph Page Feed\nReferences](https://developers.facebook.com/docs/reference/api/page/)\n\n### Évènement - Fonctions nécessitant la permission _'create_event'_.\n\n  \n\n### Créer un évènement : _$(\"#create_event\").easyfb().createEvent({ ... });_\n\nRequête utilisant\n[FB.api](https://developers.facebook.com/docs/reference/javascript/FB.api/)\npour créer un évènement sur votre profil facebook.\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `name` Obligatoire - nom de l'évènement\n  * `location` Obligatoire - ville ou emplacement de l'évènement\n  * `description` Obligatoire - Description de l'évènement \n  * `start_time` Obligatoire - Moment du début de l'activité en temps ISO-8601 ou UNIX timestamp\n  * `end_time` Optionel - Moment du fin de l'activité en temps ISO-8601 ou UNIX timestamp\n  * `privacy` Optionel - containing 'OPEN'( par default ), 'CLOSED', or 'SECRET' \n  \nPlus d'option [ici](http://developers.facebook.com/docs/reference/api/event/)\n\n  \n\n### Participer à un évènement : _$(\".attend_event\").each(function (){ ... });_\n\nRequête utilisant\n[FB.api](https://developers.facebook.com/docs/reference/javascript/FB.api/)\npour s'inscrire à un évènement sur votre profil facebook.\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `id` Obligatoire - id de l'évènement facebook\n\n### Fonctions nécessitant la permission 'publish_actions'.\n\n  \n\n### Action Facebook : _$(\"#action\").easyfb().action({ ... });_\n\nRequête utilisant\n[FB.api](https://developers.facebook.com/docs/reference/javascript/FB.api/)\npour faire des [actions\nfacebook](https://developers.facebook.com/docs/beta/opengraph/) en utlisant le\n[nouveau timeline](https://blog.facebook.com/blog.php?post=10150408488962131).\nNécessite d'avoir préabalement [créé des actions dans votre\napp](https://developers.facebook.com/docs/beta/opengraph/tutorial/). Une\naction utilise des\n[objets](https://developers.facebook.com/docs/beta/opengraph/define-objects/),\ndes [actions](https://developers.facebook.com/docs/beta/opengraph/define-\nactions/) et s'affiche avec des\n[agrégations](https://developers.facebook.com/docs/beta/opengraph/define-\nunits/). Pour utiliser les actions avec cette librairie il est nécessaire\nd'ajouter les meta tag particulier dans le head pour une page objet pour que\ncela fonctionne.\n\n  \nEx:\n\n` ‹meta property=\"fb:app_id\" content=\"APP_ID\" /›\n\n‹meta property=\"og:type\" content=\"NAMESPACE:OBJET\" /›\n\n‹meta property=\"og:title\" content=\"TITRE DE L'OBJET\" /›\n\n‹meta property=\"og:image\" content=\"URL D'IMAGE\" /›\n\n‹meta property=\"og:description\" content=\"DESCRIPTION\" /›\n\n‹meta property=\"og:url\" content=\"URL DE L'OBJET EX:action.php?object=‹?=\n$OBJET ?›\"› `\n\n  \nUne fois les actions, objets, agrégations et page objet créé cette fonction\nsimplifiera le processus d'exécution des actions sur facebook.\n\n#### Attributs:\n\n  * `on` - event(ex: 'click') on which the function is triggered base on the element in selector , if params is not present the function will be triggered on loading\n  * `app_namespace` Obligatoire - le namespace de votre app dans [facebook developers](https://developers.facebook.com/apps)\n  * `action` Obligatoire - le nom de votre action (Action Type Name)\n  * `object` Obligatoire - le nom de votre objet (Object Type Name)\n  * `object_url` Obligatoire - l'url de votre page objet\n  \n[Référence sur les objets facebook](https://developers.facebook.com/docs/beta/\nopengraph/objects/builtin/)\n\n[Object url debugger](https://developers.facebook.com/tools/debug)\n\n  \n\n### Champs autocomplété choix d'ami :\n_$(\"#friend_autocomplete\").easyfb().friendAutoComplete({ ... });_\n\nFonctions nécessitant l'ajout de **jquery-ui** dans le head de la page et\n**get_friends:'1'** lors de l'initialisation.\n\nCette fonction crée un champs autocomplété avec la liste des amis por facilité\nle choix d'un ami pour la soumission dans un formulaire. La fonction génère\ndeux champ input: l'un pour le nom de l'ami et l'autre pour le id facebook de\ncet ami. Le 'name' et 'id' des champs inputs sont paramétrable dans les\noptions de la fonction. Nécessite l'ajout de ces tag dans le head de la page:\n\n  \n`‹script type=\"text/javascript\"\nsrc=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.js\"›‹\n/script›\n\n‹link href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base\n/jquery-ui.css\" rel=\"stylesheet\" type=\"text/css\"/› `\n\n#### Attributs:\n\n  * `input_name` Obligatoire - nom de l'input généré pour le nom de l'ami selectionné\n  * `input_facebook_id` Obligatoire - nom de l'input généré pour l'id facebook de l'ami selectionné\n\n[Etienne Dion (C) 2011](http://etiennedion.com)\n\n",
  "readmeFilename": "readme.md",
  "_id": "easyfacebook.jquery.js@0.0.13",
  "description": "",
  "repository": {
    "type": "git",
    "url": "git://github.com/EtienneDion/easyfacebook.jquery.js.git"
  }
}